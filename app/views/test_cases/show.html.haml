%p#notice= notice
.row
  .col
    .dropdown.mb-5
      %h2
        History for  
        .btn-group
          %button.btn.btn-outline-primary.btn-lg.dropdown-toggle#test-case-select{type: 'button', "data-toggle".to_sym => 'dropdown', 'aria-haspopup'.to_sym => true, 'aria-expanded'.to_sym => false}
            %span.text-monospace#selected-test-case= @test_case.name
            %small.text-muted
              =surround '(', ')' do
                %span.text-monospace=@test_case.module
          .dropdown-menu{'aria-labelledby' => 'test-case-select'}
            %form.px-2.my-0
              .form-group
                %input.form-control-lg.w-100#tc-search{type: 'text', placeholder: 'Search Test Cases'}
            .dropdown-divider
            - @test_cases.each do |tc|
              -if @current_test_cases.include? tc
                =link_to((tc.name + " <small class='text-muted'>(#{tc.module})</small>").html_safe, test_case_path(branch: params[:branch], test_case: tc.name, module: tc.module), class: "text-monospace dropdown-item text-primary tc-option#{tc == @test_case ? ' active' : ''}")
              -else
                =link_to(("[#{tc.name} <small class='text-muted'>(#{tc.module})</small>]").html_safe, test_case_path(branch: params[:branch], test_case: tc.name, module: tc.module), class: "text-monospace dropdown-item text-primary tc-option d-none#{tc == @test_case ? ' active' : ''}")

        on
        .btn-group
          %button.btn.btn-outline-primary.btn-lg.dropdown-toggle#branch-select{type: 'button', "data-toggle".to_sym => 'dropdown', 'aria-haspopup'.to_sym => true, 'aria-expanded'.to_sym => false}
            =fa_icon 'code-fork'
            %samp= @branch
          .dropdown-menu{'aria-labelledby' => 'branch-select'}
            - @unmerged_branches.each do |branch|
              =link_to branch, test_case_path(branch: branch.name, test_case: params[:test_case], module: params[:module]), class: "dropdown-item text-monospace text-primary#{branch == params[:branch] ? 'active' : ''}"
        
.row.mb-4
  .col
    = form_with method: :get, local: true, class: 'mb-4' do
      .form-row
        .col-md
          .form-check
            =radio_button_tag(:history_type, 'show_instances', @show_instances, class: "form-check-input", type: 'radio', value: 'show_instances', checked: @show_instances ? 'checked' : '' )
            =label_tag(:history_type_show_instances, "Show individual submissions (1 computer)")
          .form-check.mb-4
            =radio_button_tag(:history_type, 'show_summaries', @show_summaries, class: "form-check-input", type: 'radio', value: 'show_summaries')
            =label_tag(:history_type_show_summaries, "Show summaries by commit")
          .form-group.mb-2
            =label_tag(:start_date, "Commits made after or on...")
            =date_field_tag(:start_date, @start_date, class: 'form-control')
          .form-group.mb-4
            =label_tag(:end_date, "Commits made before or on...")
            =date_field_tag(:end_date, @end_date, class: 'form-control')  
        .col-md
          .form-group.mb-2
            =label_tag(:computers, "Only show instances from...")
            =select_tag(:computers, options_for_select(@computer_options, params[:computers].to_s), class: 'form-control', disabled: (params[:history_type] == 'show_summaries'))
          .form-group.mt-2
            =label_tag(:status, "Passage Status")
            =select_tag(:status, raw(@status_options), class: 'form-control')
          =submit_tag("Search", class: 'btn btn-primary btn-block btn-lg')
-if @show_instances
  .row
    .col
      -if @computer
        .h3
          Test instances from
          %a.text-monospace.text-primary{href: user_computer_path(@computer.user, @computer)}= @computer.name
  .row
    .col
      - if @test_instances.nil? || @test_instances.empty?
        .alert.alert-warning.align-middle
          %h4
            No submissions 
            - if @computer
              from
              %span.text-monospace=@computer.name
            match this query.
      - else
        .row
          .col-sm-4.col-12.mb-3
            %h5
              General Columns
              -# %small.text-muted Check/uncheck to show/hide
            .row
              .col
                .form-check
                  %input.form-check-input.inlist-switch.mr-0{type: 'checkbox', value: 'default', id: "check-default", checked: false, 'data-inlist' => 'default'}
                  %label.form-check-label{for: "check-default"}
                    %h5 Show/Hide All
                .row
                  -@default_column_visibility.each_slice(8) do |columns|
                    .col-lg-6.col-sm-12.col-6.mb-0
                      -columns.each do |klass, checked|
                        .form-check
                          %input.form-check-input.column-switch.mr-0{type: 'checkbox', value: klass, id: klass.sub('column-', 'check-'), checked: checked, 'data-inlist' => 'default'}
                          %label.form-check-label{for: klass.sub('column-', 'check-')}= @default_column_check_titles[klass]
          .col-sm-8.col-12
            %h5
              Inlist-Specific Columns
              -# %small.text-muted Check/uncheck to show/hide
            .row
              - @inlist_columns.each_pair do |inlist, columns|
                .col-xl-3.col-lg-4.col-6.mb-3
                  .form-check
                    %input.form-check-input.inlist-switch.mr-0{type: 'checkbox', value: inlist.sub('.', 'p'), id: "check-#{inlist.sub('.', 'p')}", checked: false, 'data-inlist' => inlist.sub('.', 'p')}
                    %label.form-check-label{for: "check-#{inlist.sub('.', 'p')}"}
                      %h5.text-monospace=inlist.sub(/^inlist_/, '').sub(/_header$/, '')
                  - columns.each do |column|
                    .form-check
                      %input.form-check-input.column-switch.mr-0{type: 'checkbox', value: "#{inlist.sub('.', 'p')}-#{column}", id: "check-#{inlist.sub('.', 'p')}-#{column}", checked: @inlist_column_visibility[inlist][column], 'data-inlist' => inlist.sub('.', 'p')}
                      -if @default_column_check_titles.keys.include? column
                        %label.form-check-label{for: "check-#{inlist.sub('.', 'p')}-#{column}"}= @default_column_check_titles[column]
                      -else
                        %label.form-check-label.text-monospace{for: "check-#{inlist.sub('.', 'p')}-#{column}"}= column

        = paginate @test_instances 
       
        .table-responsive.mt-2
          %table.table.table-hover.table-sm.text-center#test-detail
            %thead.thead-default
              %tr
                %th{colspan: @default_width, id: 'header-default'} Test-wide data
                -@inlists.each do |inlist|
                  %th.text-monospace{colspan: @inlist_width[inlist], id: "header-#{inlist.sub('.', 'p')}", class: @inlist_width[inlist] > 0 ? '' : 'd-none'}=inlist.sub('inlist_', '').sub('_header', '')
              %tr
                -@default_columns.each do |col|
                  %th{class: "column-#{col} header-column-default" + (@default_column_visibility[col] ? '' : ' d-none')}
                    =link_to(@default_column_titles[col], url_for(@current_params.merge(sort_query: col, sort_order: @orders[col])))

                - @inlist_columns.each_pair do |inlist, names|
                  -names.each do |specific_col|
                    -if @default_column_titles.keys.include? specific_col
                      %th{class: "column-#{inlist.sub('.', 'p')}-#{specific_col} header-column-#{inlist.sub('.', 'p')}#{@inlist_column_visibility[inlist][specific_col] ? '' : ' d-none'}"}
                        =@default_column_titles[specific_col]
                    -else
                      %th.text-monospace{class: "column-#{inlist.sub('.', 'p')}-#{specific_col} header-column-#{inlist.sub('.', 'p')}#{@inlist_column_visibility[inlist][specific_col] ? '' : ' d-none'}"}= specific_col

            %tbody
              -@test_instances.each do |instance|
                -# %tr{class: @test_instance_classes[instance] + " clickable-row", "data-href": test_case_test_instance_path(@test_case, instance)}
                %tr
                  %td.align-middle.column-commit
                    -if instance.commit
                      %a.btn.btn-sm{href: test_case_commit_path(branch: params[:branch], test_case: params[:test_case], module: @test_case.module, sha: instance.commit.short_sha), class: @btn_classes[instance.test_case_commit.status]}
                        %span.text-reset.text-monospace=instance.commit.short_sha
                  %td.align-middle.column-status{class: instance.passed ? 'text-success' : 'text-danger'}=instance.passage_status
                  -# %td.column-computer=link_to(instance.computer, user_computer_path(instance.computer.user, instance.computer))
                  %td.align-middle.column-date{class: @default_column_visibility['date'] ? '' : 'd-none'}=format_time(instance.created_at)
                  %td.align-middle.column-runtime{class: @default_column_visibility['runtime'] ? '' : 'd-none'}
                    -if instance.runtime_minutes
                      =format('%.2f', instance.runtime_minutes)
                  %td.align-middle.column-ram{class: @default_column_visibility['ram'] ? '' : 'd-none'}=format("%.2f", instance.rn_mem_GB) + ' GB'
                  %td.align-middle.column-checksum.text-monospace{class: @default_column_visibility['checksum'] ? '' : 'd-none'}=instance.checksum[(-7..-1)] if instance.checksum
                  %td.align-middle.column-restart_photo.text-monospace{class: @default_column_visibility['restart_photo'] ? '' : 'd-none'}
                    =instance.restart_photo || ''
                  %td.align-middle.column-restart_checksum.text-monospace{class: @default_column_visibility['restart_checksum'] ? '' : 'd-none'}
                    =instance.restart_checksum[(-7..-1)] if instance.restart_checksum

                  %td.align-middle.column-threads{class: @default_column_visibility['threads'] ? '' : 'd-none'}=instance.omp_num_threads
                  %td.align-middle.column-spec{class: @default_column_visibility['spec'] ? '' : 'd-none'}=instance.computer_specification
                  %td.align-middle.column-steps{class: @default_column_visibility['steps'] ? '' : 'd-none'}=instance.steps
                  %td.align-middle.column-retries{class: @default_column_visibility['retries'] ? '' : 'd-none'}=instance.retries
                  %td.align-middle.column-redos{class: @default_column_visibility['redos'] ? '' : 'd-none'}= instance.redos
                  %td.align-middle.column-solver_iterations{class: @default_column_visibility['solver_iterations'] ? '' : 'd-none'}= instance.solver_iterations
                  %td.align-middle.column-solver_calls_made{class: @default_column_visibility['solver_calls_made'] ? '' : 'd-none'}= instance.solver_calls_made
                  %td.align-middle.column-solver_calls_failed{class: @default_column_visibility['solver_calls_failed'] ? '' : 'd-none'}= instance.solver_calls_failed

                  -@inlist_columns.each do |inlist, columns|
                    - columns.each do |column|
                      %td.align-middle{class: "column-#{inlist.sub('.', 'p')}-#{column}#{@inlist_column_visibility[inlist][column] ? '' : ' d-none'}"}
                        -val = instance.get_inlist_data(inlist, column)
                        -if val.nil?
                          = ""
                        -elsif %w[steps retries redos solver_iterations solver_calls_made solver_calls_failed].include? column.strip
                          = format('%i', val)
                        -else
                          = format('%0.3g', val)
  .row
    .col
      = paginate @test_instances unless (@test_instances.empty? || @test_instances.nil?)      
- else
  .row
    .col
      .h3
        Commit summaries for
        %span.text-monospace.text-primary= @test_case.name
  .row
    -# .col-sm-4.mb-3
    -# .mb-3.border.border-secondary{class: @inlist_columns.keys.length > 4 ? 'col-xs-12' : 'col-sm-4'}
    .col-md-4.mb-4
      %h5
        General Columns
        -# %small.text-muted Check/uncheck to show/hide
      .row
        .col
          .mb-2.form-check
            %input.form-check-input.inlist-switch.mr-0{type: 'checkbox', value: 'default', id: "check-default", checked: false, 'data-inlist' => 'default'}
            %label.form-check-label{for: "check-default"}
              %h5 Show/Hide All
      .row
        -@default_column_visibility.each_slice(6) do |columns|
          .col-lg-6.col-md-12.col-sm-6
            -columns.each do |klass, checked|
              .form-check
                %input.form-check-input.column-switch.mr-0{type: 'checkbox', value: klass, id: klass.sub('column-', 'check-'), checked: checked, 'data-inlist' => 'default'}
                %label.form-check-label{for: klass.sub('column-', 'check-')}= @default_column_check_titles[klass]
      -# .col-sm-8.mb-3
    .col-md-8
      %h5
        Inlist-Specific Columns
        -# %small.text-muted Check/uncheck to show/hide
      .row
        -@inlist_columns.each_pair do |inlist, columns|
          .col-xl-3.col-lg-4.col-md-6.col-6.mb-3
            .form-check
              %input.form-check-input.inlist-switch.mr-0{type: 'checkbox', value: inlist, id: "check-#{inlist.sub('.', 'p')}", checked: false, 'data-inlist' => inlist}
              %label.form-check-label{for: "check-#{inlist.sub('.', 'p')}"}
                %h5.text-monospace=inlist.sub(/^inlist_/, '').sub(/_header$/, '')
            - columns.each do |column|
              .form-check
                %input.form-check-input.column-switch.mr-0{type: 'checkbox', value: "#{inlist.sub('.', 'p')}-#{column}", id: "check-#{inlist.sub('.', 'p')}-#{column}", checked: @inlist_column_visibility[inlist][column], 'data-inlist' => inlist}
                -if @default_column_check_titles.keys.include? column
                  %label.form-check-label{for: "check-#{inlist.sub('.', 'p')}-#{column}"}= @default_column_check_titles[column]
                -else
                  %label.form-check-label.text-monospace{for: "check-#{inlist.sub('.', 'p')}-#{column}"}= column

  .row
    .col
      - if @test_case_commits.empty?
        .alert.alert-warning.align-middle
          %h4
            No data from
            %span.text-primary.text-monospace=@test_case.name
            matches your query.
      - else
        %p
          %i= page_entries_info @test_case_commits
        = paginate @test_case_commits        

        .table-responsive.mt-2
          %table.table.table-hover.table-sm.text-center#test-detail
            %thead.thead-default
              %tr
                %th{colspan: @default_width, id: 'header-default'} Test-wide data
                -@inlists.each do |inlist|
                  %th.text-monospace{colspan: @inlist_width[inlist], id: "header-#{inlist.sub('.', 'p')}", class: @inlist_width[inlist] > 0 ? '' : 'd-none'}=inlist.sub('inlist_', '').sub('_header', '')
              %tr
                %th.column-commit.header-column-default
                  =link_to('Commit', url_for(@current_params.merge({sort_query: 'commit', sort_order: @orders['commit']})))
                %th.column-status.header-column-default
                  =link_to('Status', url_for(@current_params.merge({sort_query: 'status', sort_order: @orders['status']})))
                -@default_columns[(2..-1)].each do |col|
                  %th{class: "column-#{col} header-column-default" + (@default_column_visibility[col] ? '' : ' d-none')}
                    -if @sortable_columns.include? col
                      =link_to(@default_column_titles[col], url_for(@current_params.merge(sort_query: col, sort_order: @orders[col])))
                    -else
                      =@default_column_titles[col]
                - @inlist_columns.each_pair do |inlist, names|
                  -names.each do |specific_col|
                    -if @default_column_titles.keys.include? specific_col
                      %th{class: "column-#{inlist.sub('.', 'p')}-#{specific_col} header-column-#{inlist.sub('.', 'p')}#{@inlist_column_visibility[inlist][specific_col] ? '' : ' d-none'}"}
                        =@default_column_titles[specific_col]
                    -else
                      %th.text-monospace.d-none{class: "column-#{inlist.sub('.', 'p')}-#{specific_col} header-column-#{inlist.sub('.', 'p')}"}= specific_col

            %tbody
              -@test_case_commits.each do |tcc|
                %tr
                  %td.align-middle.column-commit
                    %a.btn.btn-sm{href: test_case_commit_path(branch: params[:branch], test_case: params[:test_case], module: @test_case.module, sha: tcc.commit.short_sha), class: @btn_classes[tcc.status]}
                      %span.text-reset.text-monospace=tcc.commit.short_sha
                  %td.align-middle.column-status
                    -case tcc.status
                    -when 3
                      %span.text-warning Mixed
                    -when 2
                      %span.text-primary Mult. Checksums
                    -when 1
                      %span.text-danger Failing
                    -when 0
                      %span.text-success Passing
                    -else
                      %span.text-info Untested
                  %td.align-middle.column-date{class: @default_column_visibility['date'] ? '' : ' d-none'}= format_time(tcc.created_at)
                  %td.align-middle.column-checksum.text-monospace{class: @default_column_visibility['checksum'] ? '' : ' d-none'}
                    -if @first_instances[tcc] && @first_instances[tcc].checksum
                      = @first_instances[tcc].checksum[(-7..-1)]
                    -else
                      –
                  %td.align-middle.column-restart_photo{class: @default_column_visibility['restart_photo'] ? '' : ' d-none'}
                    -if @first_instances[tcc] && @first_instances[tcc].restart_photo
                      = @first_instances[tcc].restart_photo
                    -else
                      –
                  %td.align-middle.column-restart_checksum.text-monospace{class: @default_column_visibility['restart_checksum'] ? '' : ' d-none'}
                    -if @first_instances[tcc] && @first_instances[tcc].restart_checksum
                      = @first_instances[tcc].restart_checksum[(-7..-1)]
                    -else
                      –                      
                  %td.align-middle.column-steps{class: @default_column_visibility['steps'] ? '' : ' d-none'}
                    -if @first_instances[tcc]
                      = @first_instances[tcc].steps
                    -else
                      –
                  %td.align-middle.column-retries{class: @default_column_visibility['retries'] ? '' : ' d-none'}
                    -if @first_instances[tcc]
                      = @first_instances[tcc].retries
                    -else
                      –
                  %td.align-middle.column-redos{class: @default_column_visibility['redos'] ? '' : ' d-none'}
                    -if @first_instances[tcc]
                      = @first_instances[tcc].redos
                    -else
                      –
                  %td.align-middle.column-solver_iterations{class: @default_column_visibility['solver_iterations'] ? '' : ' d-none'}
                    -if @first_instances[tcc]
                      = @first_instances[tcc].solver_iterations
                    -else
                      –
                  %td.align-middle.column-solver_calls_made{class: @default_column_visibility['solver_calls_made'] ? '' : ' d-none'}
                    -if @first_instances[tcc]
                      = @first_instances[tcc].solver_calls_made
                    -else
                      –
                  %td.align-middle.column-solver_calls_failed{class: @default_column_visibility['solver_calls_failed'] ? '' : ' d-none'}
                    -if @first_instances[tcc]
                      = @first_instances[tcc].solver_calls_failed
                    -else
                      –
                  -@inlist_columns.each do |inlist, columns|
                    - columns.each do |column|
                      %td.align-middle{class: "column-#{inlist.sub('.', 'p')}-#{column}#{@inlist_column_visibility[inlist][column] ? '' : ' d-none'}"}
                        - if @first_instances[tcc]
                          -val = @first_instances[tcc].get_inlist_data(inlist, column)
                          -if val.nil?
                            –
                          -elsif val.is_a? Integer
                            = val
                          -else
                            = format('%0.3g', val)
                        - else
                          –


  .row
    .col
      = paginate @test_case_commits        
